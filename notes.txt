Updated Merlin (Merlin-64-custom) with..
Labels:   Max Length is 13 characters
Tabs: 21,27,38   (This is the last data statement in the basic loader)

Code Flow:
            ORG $C000

            Jump to Start

            Install IRQ:
 INSIRQ     Disables default int CIA timer
                Installs a raster IRQ at 0314 for raster line 233
                rts

            Raster IRQ:
IRQH            If we are not on raster 233, jump to RASTERLN0
                Bottom part of screen (Raster 233+)
                VIC CHIP BANK 0  DD00-   Char Rom: $1000-$1FFF
                VIC Set to standard 40 col text mode
                CharData: 1800   Screen: 0400 (1000 is normal rom, 1800 is reverse chars rom)
                Border + Screen medium grey
                Go to EXITIRQ

RASTERLN0       Top part of screen (Raster 0+)
                VIC Set to multicolor 40 col text mode
                CharData: 3800   Screen: 0400
                Border + Screen black
                If not paused (Shift Key not pressed)  RTI
SETPLYRX        Set Players Sprite X Position
                     Set sprite 0 to DATPLAYERX (bits 0-7) $D000
                     Load to Accumulator all sprites bit 8 ($D010)
                     AND it with FE (11111110)
                     Then or it with DATPLAYERX8 to set our cannon position
                Check for joystick going left (Read $DC00)
GOLEFT          Move cannon left 2 pixels
                Check for joystick going right
GORIGHT         Move cannon right 2 pixels
ISFIREBTN       Is the fire button pressed?
                Nope - Exit IRQ
                If it is pressed, EXIT IRQ if a bullet is already in flight   (DATBLTMV=1)
                Translate the position of the bulletr from the Sprite x (0-319) to character x (0-39)
                Calculate the screen ram address and color ram address of the bullet and store in FBFC FDFE
EXITIRQ

            Start:
START          JSR InstallIRQ
               Set fbfc to point to 0x400 (txt ram)
BLTLLP         Load bullet custom character to 0x3800
ZERO8          Create empty custom character to 0x3900
SPRLDLP        Load 4 sprites shapes into $3A00
SCSPLP         Assign sprite points at 07f8 to:
                 232 E8 = Cannon
                 233 E9 = Saucer
                 234 EA = Explosion
                 235 EB = Cannon 2
                For all sprites:
                  Multicolor enabled
                  Normal width and height
                  bit 8 = 0
                  Set shared sprites multicolors (patterns 01 and 11) to 3(Cyan) and 4(Purple)
                  Set cannon y position to 212
SAUCLRLP        Assign saucer colors from lookup table (patterns 10)
                Set Cannon sprite color to blue
                Clear the screen
INITLN1         Fill Screen row 24 with reverse spaces
                Set the colors in color ram of row 24 to green
PSCHS           Write the bottom line out (Score: 000000  High Score: 000000)
TTLPLOT         Write game title, lives and lvl to row 23
TTLLP
SETMCTXTCLRS    Set BG Color 2 (shared Multicolor text to 2 (purple))
                Set BG Color 3 (shared Multicolor text to 2 (lt blue))
INITSID         Set All SID Registers 0
                Volume to 0
                Voice 3: Freq=ff00, noise waveform, vol=1, (low,band,hi filters off)
                Set game level to 0 (00001111 15 is level 0, 15 is level 1 etc..)
                Store 3 into $C688?  No idea yet
INITCANNONX     Set Cannon X position 184
                Set flags for bullet is moving to off
                Set flag for DoNotAllowPause to off
INITSAUCERXY    Initialize The saucer positions
                   Set all Y positions to 0  (C65C 0-6) DATSAUCERY)   Sprite Y positions for saucers
                   Set all X positions to ?+31 (C65B 0-6 DATSAUCERX)  Sprite X positions for saucers
                   (Where does the 8th bit go I wonder?)
                Make all sprites visible
                Rest collision detection for sp to sp and sp to char

 254            HC21E Seems to be the main game loop
                  Check if Cannon hit a sprite
                  If so, jmp to HC3E6 = LOSELIFE (This is probably the explosion logic)




Data: (C65A and up)
DATPLYRX  = $C659 (Cannon X position bits 0-7)
DATSPRT8  = $C65A (All Sprites bit 8)
DATNOPAUSE = $C689
            Initially set to 0
            If 1 = the IRQ Handler will ignore the shift key to pause logic
            Seems to be a flag if we should honor the shift key down / pause idea
DATLEVEL   = $C68B
            Current level of the game.  Starts 15 and goes down.
            When printed, it is XORed with 15 so it prints starting at 0 and goes up to 15




The Math to move the bullet up a line on the screen
fb,fc (lohi of txt ram)   $0400 - Start of txt
fd,fe (lohi of clr ram)   $D800 - Start of color

Example:  TXT RAM $0428   (This is x=0 y=1 on the screen)
          CLR RAM $D800   Subtracts 40 from 0428 = 0400.  Takes 04 + d4 to get d8 stores in colorram hi


When a bullet hits a sprite: the sound:

What is hc669?

Manual breakdown of how INITSAUCERXY works
				Code when X is 6  (Saucers 0..6)
INITSAUCERXY	txa	set all saucer init x y      -> a=6   x=6
				asl								 -> a=12  x=6
				tay					             -> a=12  x=6 y=12
				asl                              -> a=24  x=6 y=12
				asl								 -> a=48  x=6 y=12
				asl								 -> a=96  x=6 y=12
				asl							     -> a=192 x=6 y=12
				clc								 -> a=192 x=6 y=12 c=0
				adc #$1F						 -> a=223 x=6 y=12 c=0
				sta datsaucrxlo,y
				lda #0
				sta datsaucrxhi,y
				sta $d003,y       (Set Saucer Y position)
				lda #$3c		  3c=60=0011 1100  -> a=60 x=0 y=0 c=0
				sta datsaucy,x       (1 byte per sprite 0011 1100)
				jsr hc3ba		   -> a=223 x=2 y=12 c=0
				inx				  move to next sprite
				cpx #7
				bne INITSAUCERXY

(Saucers 0..6)  Y=x*2   a=x position of sprite (0,31,63,95...223)  (Never > 255)
-> x=6 y=12 c=0  (Called from initsaucerxy with this data loaded)
RNDIZSCRDIR     stx $a9         $a9 = 6     Saucer index             (line 445)
                sty $aa         $aa = 12    Saucer hi/lo index
                lda #$d41b      read random #
                and #0101       Random of 0,1, 4, or 5    (Could be a direction facing?)
                tax             x = random number
                lda hc646,x     load in something index by 0,1,4 or 5
                ldx $a9         load in the sprite index
                sta hc670,x     ? store looked up value index by sprite #
                lda $d41b       read random #
                and $0101       Random of 0,1, 4, or 5    (Could be a direction facing?)
                asl             Becomes random of 0, 2, 8, or 10
                tay             y = this
                lda hc64c,y
                ldx $aa
                sta hc678,x
                lda hc64d,y
                sta hc679,x
                ldy $aa
                ldx $a9
                rts

datscrdir8  is hc646    (6 somethings)
datscrdir16 is hc64c    (6 lo/hi something)

test 1: make all 6 entries at zinn 00   // Saucer move only left to right
test 2: make all 6 entiies at zinn ff   // They all move up and freeze
Safe to say that ZINN is a lookup of directions to move in






There is an explosion.
sound is made, and now it is restored
X = Sprite number to test for collision (1-7)
A = Y position of the sprite
        txa
        pha
        lda     datsaucy,x
        eor     #$ff
        lsr
        lsr
        lsr
        jsr HC4C9
        pla
        tax
        ... loop logic

X = Sprite number to test for collision (1-7)   (y=60 to test)
A = Y position of the sprite
07CA..07CF = PETSCII values of the score (000000)
48=0...57=9  (58=':' one char beyond 9)
ADDTOSCORE  tax                             A=60  X=60
ADDSCLP1    ldy #6                          A=60  X=60 y=6
            sec
ADDSCLP2    lda $07CA,y                     a='0' x=60 y=6
            adc #0                          a='0' x=60 y=6  (Add the carry)
            cmp #$3A    (58 0011 1010) ':'  (Are we beyond 9?) (Carry set if >9)
            bcc SCSETDIGIT                   No
            lda #$30    (48 0011 0000) '0'  Set it to 0
SCSETDIGIT  sta $07ca,y                     Write to the screen
            dey                             a=digit x=60 y=5
            bne ADDSCLP2                    y is not 0 yet
            dex
            BNE ADDSCLP1                    x is not 0 yet
            rts

Higher score the higher the alien


Line 255 HC688 / DATLIVES    Lives is stored here AND on the screen
$079e is were lives is stored on the screen as petscii of course



HC326 What is going at 376.   Paint all sprites to their current x,y locations
x=(saucer index 0..6)   (y=saucer index * 2)
putsaucerx  txa                 x=5     a=5
            asl                 x=5     a=10
            tay                 x=5     a=10      y=10
            lda datsaucxlo,y    x=5     a=?       y=10
            sta $d002,y
            lda datasaucy,x     x=5     a=?       y=10
            sta $d003,y
            lda datsuachxhi,y   x=5     a=?       y=10
            sta $a8                                             // we may come back to this in a bit. a8=hibit of y position of sprite
            sec
            txa                 x=5     a=5       y=10
            tay                 x=5     a=5       y=5
            iny                 x=5     a=5       y=6
            iny                 x=5     a=5       y=7
            lda #$00            x=5     a=0       y=7
hc341       rol                 x=5     a=1       y=3   (a=1 because the carry flag came in from the right)
            dey                 x=5     a=1       y=2
            bne hc341           ....    a=4       y=0 (after a few loops)
            sta $a7                     a=4
            eor $ff                     a=11111011 / 251
            and $d010                   (Combine accumulte with all sprtites MSB for sprites)
            ldy $a8                     (load hibit of x stored earlier from current sprite)
            beq HC352                   if existing sprites are all 0, goto hc352
            ora $a7                     combine existing flags with our new hibit
hc352       sta $d010                   Set all hibits for sprites
            inx                         move to the next sprite
            cpx #7                      are we done?
            bne putsaucerx              nope, go back to loop


        ldx #0
hc35c   txa
        asl
        tay
        lda datsaucy,x
        clc
        adc cpyscrdir8,x
        cmp #$D2
        bcs hc36e
        cmp #$32
        bcs hc374
hc363   jsr rndizscrdir


LoseLife Logic



dayplyrx8 = C65A

Astro-Dissembled.d64  <- full disassembly in Merlin

--------------------  About to manually re-assign these for relocatable version
Moveable data section before assigning data+ offsets:
DATA            = $C65A (First memory address beyond end of the binary)
DATPLYRX8       = $C65A data
DATSAUCXLO      = $C65B data + 1
DATSAUCXHI      = $C65C data + 2
DATSAUCY        = $C669 data + 15
CPYSCRDIR8      = $C670 data + 22
CPYSCRDIR16     = $C678 data + 30
DATLIVES        = $C688 data + 46
DATNOPAUSE      = $C689 data + 47
DATSP2CHRSLT    = $C68A data + 48
DATLEVEL        = $C68B data + 49


SHSTXT          = $C5F4

[Bad]
85F6 73 63 6f 72 65 Score

[Correct]
85F6 d3 43 4f 52 45 Score

ttltxt=$C619
[12=rvrs on][95=brown]Lives:3[1d cursor right x7][1c=red]
Astro-PANIC!][1d cursor right x6][1f=blue]
level:0[space][null]

